#!/usr/bin/env python3
"""
Script de configuration automatique PostgreSQL pour BlogFlow
Cr√©e automatiquement la base de donn√©es et l'utilisateur n√©cessaires
"""
import os
import sys
import subprocess
import getpass

def run_command(command, description, check=True):
    """Ex√©cute une commande shell avec gestion d'erreurs"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if check and result.returncode != 0:
            print(f"‚ùå Erreur: {result.stderr}")
            return False
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de {description}: {e}")
        return False

def main():
    print("üêò Configuration automatique PostgreSQL pour BlogFlow")
    print("=" * 55)
    
    # V√©rifier si PostgreSQL est install√©
    if not run_command("which psql", "V√©rification de l'installation PostgreSQL", check=False):
        print("""
‚ùå PostgreSQL n'est pas install√© ou non accessible.

Installation selon votre syst√®me:
‚Ä¢ Ubuntu/Debian: sudo apt-get install postgresql postgresql-contrib python3-dev libpq-dev
‚Ä¢ CentOS/RHEL: sudo yum install postgresql postgresql-server postgresql-contrib postgresql-devel
‚Ä¢ macOS: brew install postgresql
‚Ä¢ Windows: T√©l√©charger depuis https://www.postgresql.org/download/windows/
        """)
        return False
    
    # V√©rifier si PostgreSQL fonctionne
    if not run_command("sudo systemctl status postgresql", "V√©rification du service PostgreSQL", check=False):
        if not run_command("sudo systemctl start postgresql", "D√©marrage de PostgreSQL"):
            print("‚ö†Ô∏è  Impossible de d√©marrer PostgreSQL automatiquement")
    
    # Configuration de la base de donn√©es
    print("\nüìä Configuration de la base de donn√©es...")
    
    db_commands = [
        "sudo -u postgres createdb blogflow_db 2>/dev/null || echo 'Base blogflow_db existe d√©j√†'",
        "sudo -u postgres psql -c \"CREATE USER blogflow_user WITH PASSWORD 'blogflow_password';\" 2>/dev/null || echo 'Utilisateur blogflow_user existe d√©j√†'",
        "sudo -u postgres psql -c \"ALTER ROLE blogflow_user SET client_encoding TO 'utf8';\"",
        "sudo -u postgres psql -c \"ALTER ROLE blogflow_user SET default_transaction_isolation TO 'read committed';\"",
        "sudo -u postgres psql -c \"ALTER ROLE blogflow_user SET timezone TO 'UTC';\"",
        "sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE blogflow_db TO blogflow_user;\"",
        "sudo -u postgres psql -c \"ALTER USER blogflow_user CREATEDB;\"",
    ]
    
    success = True
    for cmd in db_commands:
        if not run_command(cmd, f"Ex√©cution: {cmd.split(';')[0].split('\"')[1] if '\"' in cmd else cmd}", check=False):
            success = False
    
    if success:
        print("\n‚úÖ Configuration PostgreSQL termin√©e avec succ√®s!")
        print("\nüìã INFORMATIONS DE CONNEXION:")
        print("=" * 35)
        print("‚Ä¢ Base de donn√©es: blogflow_db")
        print("‚Ä¢ Utilisateur: blogflow_user")
        print("‚Ä¢ Mot de passe: blogflow_password")
        print("‚Ä¢ Host: localhost")
        print("‚Ä¢ Port: 5432")
        print("=" * 35)
        
        print("\nüîß √âtapes suivantes:")
        print("1. Copiez le fichier .env.example vers .env")
        print("2. Modifiez les param√®tres DATABASE_URL dans .env")
        print("3. Lancez: ./start.sh")
        
        return True
    else:
        print("\n‚ùå Erreurs lors de la configuration PostgreSQL")
        return False

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Configuration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")